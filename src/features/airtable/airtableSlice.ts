import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { RootState, AppThunk } from '../../app/store'
import getStudentsFromClass from './services/studentServices' 

const GET_STUDENT = 'mini-extension/student/GET_STUDENT'
const LOGOUT = 'mini-extension/student/LOGOUT'

export type RecordState = {
	records: any[]
}

const initialState: RecordState = {
	records: [],
}

export const incrementAsync = createAsyncThunk(GET_STUDENT, async (name: string) => {
	const result = await getStudentsFromClass(name)
	return result
})

export const counterSlice = createSlice({
	name: 'records',
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		getStudent: (state, action: PayloadAction<[]>) => {
			const { payload } = action
			state.records = [...state.records, ...payload]
		},
		logout: (state, action: PayloadAction<[]>) => {
			state.records = []
		}
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: builder => {
		builder
			.addCase(incrementAsync.pending, state => {
				state.status = 'loading'
			})
			.addCase(incrementAsync.fulfilled, (state, action) => {
				state.status = 'idle'
				state.value += action.payload
			})
			.addCase(incrementAsync.rejected, state => {
				state.status = 'failed'
			})
	},
})

export const { increment, decrement, incrementByAmount } = counterSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
	(amount: number): AppThunk =>
	(dispatch, getState) => {
		const currentValue = selectCount(getState())
		if (currentValue % 2 === 1) {
			dispatch(incrementByAmount(amount))
		}
	}

export default counterSlice.reducer
